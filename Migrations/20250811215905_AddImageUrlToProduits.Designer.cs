// <auto-generated />
using System;
using ArtMarketPlaceAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtMarketPlaceAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250811215905_AddImageUrlToProduits")]
    partial class AddImageUrlToProduits
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrixUnitaire")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int>("Quantité")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("ProduitId");

                    b.ToTable("LignesCommandes");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("MdpHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("MdpSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            MdpHash = new byte[] { 242, 109, 149, 248, 62, 69, 82, 142, 241, 189, 144, 207, 107, 73, 66, 20, 168, 234, 166, 39, 61, 71, 0, 16, 99, 133, 212, 28, 18, 15, 32, 119, 79, 62, 61, 16, 223, 93, 168, 141, 222, 49, 116, 35, 84, 73, 243, 96, 30, 0, 102, 239, 240, 19, 3, 213, 176, 216, 210, 169, 51, 202, 28, 187 },
                            MdpSalt = new byte[] { 149, 190, 226, 32, 144, 39, 48, 236, 148, 249, 168, 18, 156, 68, 59, 100, 225, 0, 219, 83, 197, 80, 205, 68, 169, 201, 22, 53, 55, 207, 103, 49, 182, 30, 11, 4, 146, 226, 121, 66, 109, 231, 222, 236, 237, 189, 12, 139, 209, 112, 77, 88, 238, 237, 102, 125, 19, 112, 107, 186, 82, 92, 110, 36, 133, 225, 161, 98, 192, 170, 96, 65, 107, 95, 245, 193, 49, 90, 7, 224, 22, 144, 222, 182, 132, 59, 34, 94, 94, 217, 12, 223, 241, 83, 54, 19, 93, 37, 71, 17, 178, 110, 2, 239, 15, 196, 10, 58, 193, 100, 250, 152, 206, 150, 19, 103, 213, 7, 186, 95, 234, 72, 33, 159, 107, 36, 238, 238 },
                            NomComplet = "Admin Test",
                            Role = 3
                        },
                        new
                        {
                            Id = 2,
                            Email = "artisan@example.com",
                            MdpHash = new byte[] { 242, 109, 149, 248, 62, 69, 82, 142, 241, 189, 144, 207, 107, 73, 66, 20, 168, 234, 166, 39, 61, 71, 0, 16, 99, 133, 212, 28, 18, 15, 32, 119, 79, 62, 61, 16, 223, 93, 168, 141, 222, 49, 116, 35, 84, 73, 243, 96, 30, 0, 102, 239, 240, 19, 3, 213, 176, 216, 210, 169, 51, 202, 28, 187 },
                            MdpSalt = new byte[] { 149, 190, 226, 32, 144, 39, 48, 236, 148, 249, 168, 18, 156, 68, 59, 100, 225, 0, 219, 83, 197, 80, 205, 68, 169, 201, 22, 53, 55, 207, 103, 49, 182, 30, 11, 4, 146, 226, 121, 66, 109, 231, 222, 236, 237, 189, 12, 139, 209, 112, 77, 88, 238, 237, 102, 125, 19, 112, 107, 186, 82, 92, 110, 36, 133, 225, 161, 98, 192, 170, 96, 65, 107, 95, 245, 193, 49, 90, 7, 224, 22, 144, 222, 182, 132, 59, 34, 94, 94, 217, 12, 223, 241, 83, 54, 19, 93, 37, 71, 17, 178, 110, 2, 239, 15, 196, 10, 58, 193, 100, 250, 152, 206, 150, 19, 103, 213, 7, 186, 95, 234, 72, 33, 159, 107, 36, 238, 238 },
                            NomComplet = "Artisan Test",
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "client@example.com",
                            MdpHash = new byte[] { 242, 109, 149, 248, 62, 69, 82, 142, 241, 189, 144, 207, 107, 73, 66, 20, 168, 234, 166, 39, 61, 71, 0, 16, 99, 133, 212, 28, 18, 15, 32, 119, 79, 62, 61, 16, 223, 93, 168, 141, 222, 49, 116, 35, 84, 73, 243, 96, 30, 0, 102, 239, 240, 19, 3, 213, 176, 216, 210, 169, 51, 202, 28, 187 },
                            MdpSalt = new byte[] { 149, 190, 226, 32, 144, 39, 48, 236, 148, 249, 168, 18, 156, 68, 59, 100, 225, 0, 219, 83, 197, 80, 205, 68, 169, 201, 22, 53, 55, 207, 103, 49, 182, 30, 11, 4, 146, 226, 121, 66, 109, 231, 222, 236, 237, 189, 12, 139, 209, 112, 77, 88, 238, 237, 102, 125, 19, 112, 107, 186, 82, 92, 110, 36, 133, 225, 161, 98, 192, 170, 96, 65, 107, 95, 245, 193, 49, 90, 7, 224, 22, 144, 222, 182, 132, 59, 34, 94, 94, 217, 12, 223, 241, 83, 54, 19, 93, 37, 71, 17, 178, 110, 2, 239, 15, 196, 10, 58, 193, 100, 250, 152, 206, 150, 19, 103, 213, 7, 186, 95, 234, 72, 33, 159, 107, 36, 238, 238 },
                            NomComplet = "Client Test",
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "livreur@example.com",
                            MdpHash = new byte[] { 242, 109, 149, 248, 62, 69, 82, 142, 241, 189, 144, 207, 107, 73, 66, 20, 168, 234, 166, 39, 61, 71, 0, 16, 99, 133, 212, 28, 18, 15, 32, 119, 79, 62, 61, 16, 223, 93, 168, 141, 222, 49, 116, 35, 84, 73, 243, 96, 30, 0, 102, 239, 240, 19, 3, 213, 176, 216, 210, 169, 51, 202, 28, 187 },
                            MdpSalt = new byte[] { 149, 190, 226, 32, 144, 39, 48, 236, 148, 249, 168, 18, 156, 68, 59, 100, 225, 0, 219, 83, 197, 80, 205, 68, 169, 201, 22, 53, 55, 207, 103, 49, 182, 30, 11, 4, 146, 226, 121, 66, 109, 231, 222, 236, 237, 189, 12, 139, 209, 112, 77, 88, 238, 237, 102, 125, 19, 112, 107, 186, 82, 92, 110, 36, 133, 225, 161, 98, 192, 170, 96, 65, 107, 95, 245, 193, 49, 90, 7, 224, 22, 144, 222, 182, 132, 59, 34, 94, 94, 217, 12, 223, 241, 83, 54, 19, 93, 37, 71, 17, 178, 110, 2, 239, 15, 196, 10, 58, 193, 100, 250, 152, 206, 150, 19, 103, 213, 7, 186, 95, 234, 72, 33, 159, 107, 36, 238, 238 },
                            NomComplet = "Livreur Test",
                            Role = 2
                        });
                });

            modelBuilder.Entity("Avis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAvis")
                        .HasColumnType("datetime2");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProduitId");

                    b.ToTable("Avis");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCommande")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LivreurId")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<int?>("StatutLivraison")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LivreurId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtisanId")
                        .HasColumnType("int");

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Prix")
                        .HasColumnType("real");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.HasOne("Commande", "Commande")
                        .WithMany("Lignes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany("LigneCommandes")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commande");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Avis", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany("Avis")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany("CommandesClient")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Livreur")
                        .WithMany("CommandesLivreur")
                        .HasForeignKey("LivreurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Livreur");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Artisan")
                        .WithMany("Produits")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artisan");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Navigation("CommandesClient");

                    b.Navigation("CommandesLivreur");

                    b.Navigation("Produits");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Navigation("Lignes");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.Navigation("Avis");

                    b.Navigation("LigneCommandes");
                });
#pragma warning restore 612, 618
        }
    }
}
