// <auto-generated />
using System;
using ArtMarketPlaceAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtMarketPlaceAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250818105358_FixProduitPrix")]
    partial class FixProduitPrix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.Avis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAvis")
                        .HasColumnType("datetime2");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProduitId");

                    b.ToTable("Avis");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProduitId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrixUnitaire")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int>("Quantité")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("ProduitId");

                    b.ToTable("LignesCommandes");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("MdpHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("MdpSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            MdpHash = new byte[] { 2, 224, 43, 29, 194, 233, 74, 25, 46, 106, 43, 216, 126, 166, 10, 222, 114, 113, 152, 81, 70, 122, 127, 150, 6, 8, 217, 209, 231, 31, 235, 102, 240, 158, 202, 190, 239, 137, 60, 139, 142, 36, 156, 102, 104, 126, 245, 182, 62, 23, 93, 33, 200, 13, 115, 31, 8, 215, 242, 42, 86, 186, 182, 74 },
                            MdpSalt = new byte[] { 21, 174, 59, 164, 15, 57, 31, 101, 184, 119, 125, 168, 184, 243, 239, 126, 91, 250, 10, 43, 124, 229, 132, 17, 139, 52, 100, 77, 162, 193, 243, 76, 117, 128, 174, 104, 69, 246, 183, 247, 220, 241, 166, 0, 134, 13, 141, 234, 117, 219, 245, 82, 49, 59, 159, 68, 215, 41, 14, 204, 26, 163, 131, 225, 51, 200, 154, 212, 104, 186, 118, 172, 163, 75, 26, 83, 130, 134, 16, 0, 244, 53, 77, 159, 234, 42, 246, 41, 240, 154, 123, 86, 180, 108, 6, 177, 115, 46, 182, 93, 230, 135, 183, 244, 161, 47, 57, 109, 169, 135, 1, 102, 48, 101, 143, 217, 76, 123, 249, 97, 96, 86, 82, 217, 60, 181, 203, 225 },
                            NomComplet = "Admin Test",
                            Role = 3
                        },
                        new
                        {
                            Id = 2,
                            Email = "artisan@example.com",
                            MdpHash = new byte[] { 2, 224, 43, 29, 194, 233, 74, 25, 46, 106, 43, 216, 126, 166, 10, 222, 114, 113, 152, 81, 70, 122, 127, 150, 6, 8, 217, 209, 231, 31, 235, 102, 240, 158, 202, 190, 239, 137, 60, 139, 142, 36, 156, 102, 104, 126, 245, 182, 62, 23, 93, 33, 200, 13, 115, 31, 8, 215, 242, 42, 86, 186, 182, 74 },
                            MdpSalt = new byte[] { 21, 174, 59, 164, 15, 57, 31, 101, 184, 119, 125, 168, 184, 243, 239, 126, 91, 250, 10, 43, 124, 229, 132, 17, 139, 52, 100, 77, 162, 193, 243, 76, 117, 128, 174, 104, 69, 246, 183, 247, 220, 241, 166, 0, 134, 13, 141, 234, 117, 219, 245, 82, 49, 59, 159, 68, 215, 41, 14, 204, 26, 163, 131, 225, 51, 200, 154, 212, 104, 186, 118, 172, 163, 75, 26, 83, 130, 134, 16, 0, 244, 53, 77, 159, 234, 42, 246, 41, 240, 154, 123, 86, 180, 108, 6, 177, 115, 46, 182, 93, 230, 135, 183, 244, 161, 47, 57, 109, 169, 135, 1, 102, 48, 101, 143, 217, 76, 123, 249, 97, 96, 86, 82, 217, 60, 181, 203, 225 },
                            NomComplet = "Artisan Test",
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "client@example.com",
                            MdpHash = new byte[] { 2, 224, 43, 29, 194, 233, 74, 25, 46, 106, 43, 216, 126, 166, 10, 222, 114, 113, 152, 81, 70, 122, 127, 150, 6, 8, 217, 209, 231, 31, 235, 102, 240, 158, 202, 190, 239, 137, 60, 139, 142, 36, 156, 102, 104, 126, 245, 182, 62, 23, 93, 33, 200, 13, 115, 31, 8, 215, 242, 42, 86, 186, 182, 74 },
                            MdpSalt = new byte[] { 21, 174, 59, 164, 15, 57, 31, 101, 184, 119, 125, 168, 184, 243, 239, 126, 91, 250, 10, 43, 124, 229, 132, 17, 139, 52, 100, 77, 162, 193, 243, 76, 117, 128, 174, 104, 69, 246, 183, 247, 220, 241, 166, 0, 134, 13, 141, 234, 117, 219, 245, 82, 49, 59, 159, 68, 215, 41, 14, 204, 26, 163, 131, 225, 51, 200, 154, 212, 104, 186, 118, 172, 163, 75, 26, 83, 130, 134, 16, 0, 244, 53, 77, 159, 234, 42, 246, 41, 240, 154, 123, 86, 180, 108, 6, 177, 115, 46, 182, 93, 230, 135, 183, 244, 161, 47, 57, 109, 169, 135, 1, 102, 48, 101, 143, 217, 76, 123, 249, 97, 96, 86, 82, 217, 60, 181, 203, 225 },
                            NomComplet = "Client Test",
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "livreur@example.com",
                            MdpHash = new byte[] { 2, 224, 43, 29, 194, 233, 74, 25, 46, 106, 43, 216, 126, 166, 10, 222, 114, 113, 152, 81, 70, 122, 127, 150, 6, 8, 217, 209, 231, 31, 235, 102, 240, 158, 202, 190, 239, 137, 60, 139, 142, 36, 156, 102, 104, 126, 245, 182, 62, 23, 93, 33, 200, 13, 115, 31, 8, 215, 242, 42, 86, 186, 182, 74 },
                            MdpSalt = new byte[] { 21, 174, 59, 164, 15, 57, 31, 101, 184, 119, 125, 168, 184, 243, 239, 126, 91, 250, 10, 43, 124, 229, 132, 17, 139, 52, 100, 77, 162, 193, 243, 76, 117, 128, 174, 104, 69, 246, 183, 247, 220, 241, 166, 0, 134, 13, 141, 234, 117, 219, 245, 82, 49, 59, 159, 68, 215, 41, 14, 204, 26, 163, 131, 225, 51, 200, 154, 212, 104, 186, 118, 172, 163, 75, 26, 83, 130, 134, 16, 0, 244, 53, 77, 159, 234, 42, 246, 41, 240, 154, 123, 86, 180, 108, 6, 177, 115, 46, 182, 93, 230, 135, 183, 244, 161, 47, 57, 109, 169, 135, 1, 102, 48, 101, 143, 217, 76, 123, 249, 97, 96, 86, 82, 217, 60, 181, 203, 225 },
                            NomComplet = "Livreur Test",
                            Role = 2
                        });
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdresseLivraison")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCommande")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLivraison")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LivreurId")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<int?>("StatutLivraison")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LivreurId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtisanId")
                        .HasColumnType("int");

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Prix")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.Avis", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany("Avis")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.CartItem", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany()
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.HasOne("Commande", "Commande")
                        .WithMany("Lignes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany("LigneCommandes")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commande");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany("CommandesClient")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Livreur")
                        .WithMany("CommandesLivreur")
                        .HasForeignKey("LivreurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Livreur");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Artisan")
                        .WithMany("Produits")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artisan");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Navigation("CommandesClient");

                    b.Navigation("CommandesLivreur");

                    b.Navigation("Produits");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Navigation("Lignes");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.Navigation("Avis");

                    b.Navigation("LigneCommandes");
                });
#pragma warning restore 612, 618
        }
    }
}
