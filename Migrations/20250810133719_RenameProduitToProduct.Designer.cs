// <auto-generated />
using System;
using ArtMarketPlaceAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtMarketPlaceAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250810133719_RenameProduitToProduct")]
    partial class RenameProduitToProduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrixUnitaire")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int>("Quantité")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("ProduitId");

                    b.ToTable("LignesCommandes");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("MdpHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("MdpSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            MdpHash = new byte[] { 216, 160, 220, 146, 131, 235, 137, 176, 108, 147, 52, 58, 233, 11, 26, 178, 59, 65, 22, 37, 19, 243, 63, 119, 33, 200, 44, 251, 1, 205, 51, 201, 76, 21, 54, 182, 253, 209, 248, 107, 49, 198, 149, 9, 229, 254, 61, 143, 177, 205, 223, 20, 27, 193, 0, 142, 221, 250, 196, 93, 98, 11, 169, 89 },
                            MdpSalt = new byte[] { 119, 48, 19, 64, 180, 45, 171, 69, 54, 96, 113, 107, 129, 154, 195, 54, 234, 201, 199, 243, 174, 48, 81, 240, 116, 235, 200, 202, 69, 188, 162, 106, 110, 151, 205, 170, 152, 70, 99, 12, 127, 59, 24, 210, 195, 85, 120, 133, 14, 180, 2, 103, 153, 51, 85, 36, 93, 29, 33, 186, 153, 134, 137, 227, 106, 194, 146, 84, 145, 150, 174, 8, 126, 121, 163, 228, 226, 70, 75, 125, 45, 35, 119, 250, 66, 26, 108, 159, 148, 185, 85, 4, 165, 204, 62, 164, 241, 37, 171, 183, 207, 244, 197, 214, 88, 223, 49, 211, 149, 249, 253, 205, 49, 51, 1, 125, 99, 33, 145, 20, 19, 122, 114, 1, 145, 152, 26, 223 },
                            NomComplet = "Admin Test",
                            Role = 3
                        },
                        new
                        {
                            Id = 2,
                            Email = "artisan@example.com",
                            MdpHash = new byte[] { 216, 160, 220, 146, 131, 235, 137, 176, 108, 147, 52, 58, 233, 11, 26, 178, 59, 65, 22, 37, 19, 243, 63, 119, 33, 200, 44, 251, 1, 205, 51, 201, 76, 21, 54, 182, 253, 209, 248, 107, 49, 198, 149, 9, 229, 254, 61, 143, 177, 205, 223, 20, 27, 193, 0, 142, 221, 250, 196, 93, 98, 11, 169, 89 },
                            MdpSalt = new byte[] { 119, 48, 19, 64, 180, 45, 171, 69, 54, 96, 113, 107, 129, 154, 195, 54, 234, 201, 199, 243, 174, 48, 81, 240, 116, 235, 200, 202, 69, 188, 162, 106, 110, 151, 205, 170, 152, 70, 99, 12, 127, 59, 24, 210, 195, 85, 120, 133, 14, 180, 2, 103, 153, 51, 85, 36, 93, 29, 33, 186, 153, 134, 137, 227, 106, 194, 146, 84, 145, 150, 174, 8, 126, 121, 163, 228, 226, 70, 75, 125, 45, 35, 119, 250, 66, 26, 108, 159, 148, 185, 85, 4, 165, 204, 62, 164, 241, 37, 171, 183, 207, 244, 197, 214, 88, 223, 49, 211, 149, 249, 253, 205, 49, 51, 1, 125, 99, 33, 145, 20, 19, 122, 114, 1, 145, 152, 26, 223 },
                            NomComplet = "Artisan Test",
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "client@example.com",
                            MdpHash = new byte[] { 216, 160, 220, 146, 131, 235, 137, 176, 108, 147, 52, 58, 233, 11, 26, 178, 59, 65, 22, 37, 19, 243, 63, 119, 33, 200, 44, 251, 1, 205, 51, 201, 76, 21, 54, 182, 253, 209, 248, 107, 49, 198, 149, 9, 229, 254, 61, 143, 177, 205, 223, 20, 27, 193, 0, 142, 221, 250, 196, 93, 98, 11, 169, 89 },
                            MdpSalt = new byte[] { 119, 48, 19, 64, 180, 45, 171, 69, 54, 96, 113, 107, 129, 154, 195, 54, 234, 201, 199, 243, 174, 48, 81, 240, 116, 235, 200, 202, 69, 188, 162, 106, 110, 151, 205, 170, 152, 70, 99, 12, 127, 59, 24, 210, 195, 85, 120, 133, 14, 180, 2, 103, 153, 51, 85, 36, 93, 29, 33, 186, 153, 134, 137, 227, 106, 194, 146, 84, 145, 150, 174, 8, 126, 121, 163, 228, 226, 70, 75, 125, 45, 35, 119, 250, 66, 26, 108, 159, 148, 185, 85, 4, 165, 204, 62, 164, 241, 37, 171, 183, 207, 244, 197, 214, 88, 223, 49, 211, 149, 249, 253, 205, 49, 51, 1, 125, 99, 33, 145, 20, 19, 122, 114, 1, 145, 152, 26, 223 },
                            NomComplet = "Client Test",
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "livreur@example.com",
                            MdpHash = new byte[] { 216, 160, 220, 146, 131, 235, 137, 176, 108, 147, 52, 58, 233, 11, 26, 178, 59, 65, 22, 37, 19, 243, 63, 119, 33, 200, 44, 251, 1, 205, 51, 201, 76, 21, 54, 182, 253, 209, 248, 107, 49, 198, 149, 9, 229, 254, 61, 143, 177, 205, 223, 20, 27, 193, 0, 142, 221, 250, 196, 93, 98, 11, 169, 89 },
                            MdpSalt = new byte[] { 119, 48, 19, 64, 180, 45, 171, 69, 54, 96, 113, 107, 129, 154, 195, 54, 234, 201, 199, 243, 174, 48, 81, 240, 116, 235, 200, 202, 69, 188, 162, 106, 110, 151, 205, 170, 152, 70, 99, 12, 127, 59, 24, 210, 195, 85, 120, 133, 14, 180, 2, 103, 153, 51, 85, 36, 93, 29, 33, 186, 153, 134, 137, 227, 106, 194, 146, 84, 145, 150, 174, 8, 126, 121, 163, 228, 226, 70, 75, 125, 45, 35, 119, 250, 66, 26, 108, 159, 148, 185, 85, 4, 165, 204, 62, 164, 241, 37, 171, 183, 207, 244, 197, 214, 88, 223, 49, 211, 149, 249, 253, 205, 49, 51, 1, 125, 99, 33, 145, 20, 19, 122, 114, 1, 145, 152, 26, 223 },
                            NomComplet = "Livreur Test",
                            Role = 2
                        });
                });

            modelBuilder.Entity("Avis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAvis")
                        .HasColumnType("datetime2");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProduitId");

                    b.ToTable("Avis");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCommande")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LivreurId")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<int?>("StatutLivraison")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LivreurId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtisanId")
                        .HasColumnType("int");

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Prix")
                        .HasColumnType("real");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.HasOne("Commande", "Commande")
                        .WithMany("Lignes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany("LigneCommandes")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commande");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Avis", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany("Avis")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany("CommandesClient")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Livreur")
                        .WithMany("CommandesLivreur")
                        .HasForeignKey("LivreurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Livreur");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Artisan")
                        .WithMany("Produits")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artisan");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Navigation("CommandesClient");

                    b.Navigation("CommandesLivreur");

                    b.Navigation("Produits");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Navigation("Lignes");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.Navigation("Avis");

                    b.Navigation("LigneCommandes");
                });
#pragma warning restore 612, 618
        }
    }
}
