// <auto-generated />
using System;
using ArtMarketPlaceAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtMarketPlaceAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250819204850_InitPanierEtCommandes")]
    partial class InitPanierEtCommandes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.Avis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAvis")
                        .HasColumnType("datetime2");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProduitId");

                    b.ToTable("Avis");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProduitId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrixUnitaire")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int>("Quantité")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("ProduitId");

                    b.ToTable("LignesCommandes");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("MdpHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("MdpSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            MdpHash = new byte[] { 185, 233, 23, 177, 77, 223, 101, 31, 135, 215, 102, 166, 46, 80, 83, 94, 239, 54, 100, 239, 92, 132, 181, 123, 250, 139, 162, 74, 97, 79, 156, 98, 19, 73, 150, 76, 195, 218, 218, 147, 196, 247, 235, 201, 80, 172, 98, 8, 91, 236, 168, 160, 171, 16, 222, 186, 6, 163, 140, 12, 218, 115, 8, 196 },
                            MdpSalt = new byte[] { 181, 165, 230, 72, 185, 24, 98, 2, 246, 254, 208, 116, 145, 57, 87, 39, 102, 176, 45, 207, 109, 86, 247, 79, 142, 65, 56, 205, 16, 15, 204, 24, 88, 40, 2, 92, 196, 203, 236, 239, 81, 184, 7, 62, 106, 78, 40, 238, 196, 157, 252, 27, 132, 172, 39, 122, 47, 106, 57, 244, 164, 144, 167, 149, 86, 89, 165, 184, 171, 99, 241, 255, 237, 220, 204, 88, 136, 150, 133, 87, 29, 146, 98, 246, 122, 252, 20, 60, 118, 100, 76, 83, 207, 152, 60, 58, 208, 99, 197, 125, 169, 161, 22, 62, 3, 217, 245, 217, 108, 137, 64, 103, 232, 235, 91, 32, 142, 212, 163, 3, 241, 138, 203, 26, 56, 171, 108, 248 },
                            NomComplet = "Admin Test",
                            Role = 3
                        },
                        new
                        {
                            Id = 2,
                            Email = "artisan@example.com",
                            MdpHash = new byte[] { 185, 233, 23, 177, 77, 223, 101, 31, 135, 215, 102, 166, 46, 80, 83, 94, 239, 54, 100, 239, 92, 132, 181, 123, 250, 139, 162, 74, 97, 79, 156, 98, 19, 73, 150, 76, 195, 218, 218, 147, 196, 247, 235, 201, 80, 172, 98, 8, 91, 236, 168, 160, 171, 16, 222, 186, 6, 163, 140, 12, 218, 115, 8, 196 },
                            MdpSalt = new byte[] { 181, 165, 230, 72, 185, 24, 98, 2, 246, 254, 208, 116, 145, 57, 87, 39, 102, 176, 45, 207, 109, 86, 247, 79, 142, 65, 56, 205, 16, 15, 204, 24, 88, 40, 2, 92, 196, 203, 236, 239, 81, 184, 7, 62, 106, 78, 40, 238, 196, 157, 252, 27, 132, 172, 39, 122, 47, 106, 57, 244, 164, 144, 167, 149, 86, 89, 165, 184, 171, 99, 241, 255, 237, 220, 204, 88, 136, 150, 133, 87, 29, 146, 98, 246, 122, 252, 20, 60, 118, 100, 76, 83, 207, 152, 60, 58, 208, 99, 197, 125, 169, 161, 22, 62, 3, 217, 245, 217, 108, 137, 64, 103, 232, 235, 91, 32, 142, 212, 163, 3, 241, 138, 203, 26, 56, 171, 108, 248 },
                            NomComplet = "Artisan Test",
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "client@example.com",
                            MdpHash = new byte[] { 185, 233, 23, 177, 77, 223, 101, 31, 135, 215, 102, 166, 46, 80, 83, 94, 239, 54, 100, 239, 92, 132, 181, 123, 250, 139, 162, 74, 97, 79, 156, 98, 19, 73, 150, 76, 195, 218, 218, 147, 196, 247, 235, 201, 80, 172, 98, 8, 91, 236, 168, 160, 171, 16, 222, 186, 6, 163, 140, 12, 218, 115, 8, 196 },
                            MdpSalt = new byte[] { 181, 165, 230, 72, 185, 24, 98, 2, 246, 254, 208, 116, 145, 57, 87, 39, 102, 176, 45, 207, 109, 86, 247, 79, 142, 65, 56, 205, 16, 15, 204, 24, 88, 40, 2, 92, 196, 203, 236, 239, 81, 184, 7, 62, 106, 78, 40, 238, 196, 157, 252, 27, 132, 172, 39, 122, 47, 106, 57, 244, 164, 144, 167, 149, 86, 89, 165, 184, 171, 99, 241, 255, 237, 220, 204, 88, 136, 150, 133, 87, 29, 146, 98, 246, 122, 252, 20, 60, 118, 100, 76, 83, 207, 152, 60, 58, 208, 99, 197, 125, 169, 161, 22, 62, 3, 217, 245, 217, 108, 137, 64, 103, 232, 235, 91, 32, 142, 212, 163, 3, 241, 138, 203, 26, 56, 171, 108, 248 },
                            NomComplet = "Client Test",
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "livreur@example.com",
                            MdpHash = new byte[] { 185, 233, 23, 177, 77, 223, 101, 31, 135, 215, 102, 166, 46, 80, 83, 94, 239, 54, 100, 239, 92, 132, 181, 123, 250, 139, 162, 74, 97, 79, 156, 98, 19, 73, 150, 76, 195, 218, 218, 147, 196, 247, 235, 201, 80, 172, 98, 8, 91, 236, 168, 160, 171, 16, 222, 186, 6, 163, 140, 12, 218, 115, 8, 196 },
                            MdpSalt = new byte[] { 181, 165, 230, 72, 185, 24, 98, 2, 246, 254, 208, 116, 145, 57, 87, 39, 102, 176, 45, 207, 109, 86, 247, 79, 142, 65, 56, 205, 16, 15, 204, 24, 88, 40, 2, 92, 196, 203, 236, 239, 81, 184, 7, 62, 106, 78, 40, 238, 196, 157, 252, 27, 132, 172, 39, 122, 47, 106, 57, 244, 164, 144, 167, 149, 86, 89, 165, 184, 171, 99, 241, 255, 237, 220, 204, 88, 136, 150, 133, 87, 29, 146, 98, 246, 122, 252, 20, 60, 118, 100, 76, 83, 207, 152, 60, 58, 208, 99, 197, 125, 169, 161, 22, 62, 3, 217, 245, 217, 108, 137, 64, 103, 232, 235, 91, 32, 142, 212, 163, 3, 241, 138, 203, 26, 56, 171, 108, 248 },
                            NomComplet = "Livreur Test",
                            Role = 2
                        });
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdresseLivraison")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCommande")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLivraison")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LivreurId")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<int?>("StatutLivraison")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LivreurId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtisanId")
                        .HasColumnType("int");

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Prix")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.Avis", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany("Avis")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.CartItem", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany()
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.HasOne("Commande", "Commande")
                        .WithMany("Lignes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany("LigneCommandes")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commande");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany("CommandesClient")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Livreur")
                        .WithMany("CommandesLivreur")
                        .HasForeignKey("LivreurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Livreur");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Artisan")
                        .WithMany("Produits")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artisan");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Navigation("CommandesClient");

                    b.Navigation("CommandesLivreur");

                    b.Navigation("Produits");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Navigation("Lignes");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.Navigation("Avis");

                    b.Navigation("LigneCommandes");
                });
#pragma warning restore 612, 618
        }
    }
}
