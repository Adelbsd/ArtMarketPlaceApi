// <auto-generated />
using System;
using ArtMarketPlaceAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtMarketPlaceAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrixUnitaire")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int>("Quantité")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("ProduitId");

                    b.ToTable("LignesCommandes");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("MdpHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("MdpSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            MdpHash = new byte[] { 103, 57, 215, 109, 198, 81, 160, 150, 125, 46, 73, 18, 115, 168, 106, 173, 174, 79, 105, 179, 177, 7, 221, 81, 121, 241, 43, 185, 30, 218, 251, 170, 198, 89, 21, 18, 239, 34, 157, 42, 32, 32, 159, 146, 62, 201, 166, 99, 138, 102, 86, 90, 0, 156, 78, 173, 131, 159, 214, 175, 85, 43, 255, 20 },
                            MdpSalt = new byte[] { 150, 56, 189, 117, 50, 35, 248, 10, 193, 191, 252, 110, 148, 192, 206, 243, 29, 57, 36, 45, 247, 108, 112, 70, 152, 67, 17, 204, 251, 116, 214, 62, 209, 77, 169, 217, 157, 168, 163, 190, 65, 199, 33, 185, 90, 9, 100, 123, 151, 198, 63, 85, 7, 236, 211, 184, 93, 17, 246, 102, 100, 91, 96, 96, 70, 168, 168, 192, 91, 213, 34, 137, 225, 196, 47, 40, 182, 41, 33, 70, 210, 247, 76, 196, 152, 71, 144, 31, 105, 8, 237, 248, 185, 59, 205, 7, 38, 122, 153, 29, 32, 237, 8, 248, 143, 238, 224, 35, 193, 41, 147, 51, 168, 239, 225, 130, 23, 82, 152, 140, 152, 96, 226, 252, 163, 164, 185, 156 },
                            NomComplet = "Admin Test",
                            Role = 3
                        },
                        new
                        {
                            Id = 2,
                            Email = "artisan@example.com",
                            MdpHash = new byte[] { 103, 57, 215, 109, 198, 81, 160, 150, 125, 46, 73, 18, 115, 168, 106, 173, 174, 79, 105, 179, 177, 7, 221, 81, 121, 241, 43, 185, 30, 218, 251, 170, 198, 89, 21, 18, 239, 34, 157, 42, 32, 32, 159, 146, 62, 201, 166, 99, 138, 102, 86, 90, 0, 156, 78, 173, 131, 159, 214, 175, 85, 43, 255, 20 },
                            MdpSalt = new byte[] { 150, 56, 189, 117, 50, 35, 248, 10, 193, 191, 252, 110, 148, 192, 206, 243, 29, 57, 36, 45, 247, 108, 112, 70, 152, 67, 17, 204, 251, 116, 214, 62, 209, 77, 169, 217, 157, 168, 163, 190, 65, 199, 33, 185, 90, 9, 100, 123, 151, 198, 63, 85, 7, 236, 211, 184, 93, 17, 246, 102, 100, 91, 96, 96, 70, 168, 168, 192, 91, 213, 34, 137, 225, 196, 47, 40, 182, 41, 33, 70, 210, 247, 76, 196, 152, 71, 144, 31, 105, 8, 237, 248, 185, 59, 205, 7, 38, 122, 153, 29, 32, 237, 8, 248, 143, 238, 224, 35, 193, 41, 147, 51, 168, 239, 225, 130, 23, 82, 152, 140, 152, 96, 226, 252, 163, 164, 185, 156 },
                            NomComplet = "Artisan Test",
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "client@example.com",
                            MdpHash = new byte[] { 103, 57, 215, 109, 198, 81, 160, 150, 125, 46, 73, 18, 115, 168, 106, 173, 174, 79, 105, 179, 177, 7, 221, 81, 121, 241, 43, 185, 30, 218, 251, 170, 198, 89, 21, 18, 239, 34, 157, 42, 32, 32, 159, 146, 62, 201, 166, 99, 138, 102, 86, 90, 0, 156, 78, 173, 131, 159, 214, 175, 85, 43, 255, 20 },
                            MdpSalt = new byte[] { 150, 56, 189, 117, 50, 35, 248, 10, 193, 191, 252, 110, 148, 192, 206, 243, 29, 57, 36, 45, 247, 108, 112, 70, 152, 67, 17, 204, 251, 116, 214, 62, 209, 77, 169, 217, 157, 168, 163, 190, 65, 199, 33, 185, 90, 9, 100, 123, 151, 198, 63, 85, 7, 236, 211, 184, 93, 17, 246, 102, 100, 91, 96, 96, 70, 168, 168, 192, 91, 213, 34, 137, 225, 196, 47, 40, 182, 41, 33, 70, 210, 247, 76, 196, 152, 71, 144, 31, 105, 8, 237, 248, 185, 59, 205, 7, 38, 122, 153, 29, 32, 237, 8, 248, 143, 238, 224, 35, 193, 41, 147, 51, 168, 239, 225, 130, 23, 82, 152, 140, 152, 96, 226, 252, 163, 164, 185, 156 },
                            NomComplet = "Client Test",
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "livreur@example.com",
                            MdpHash = new byte[] { 103, 57, 215, 109, 198, 81, 160, 150, 125, 46, 73, 18, 115, 168, 106, 173, 174, 79, 105, 179, 177, 7, 221, 81, 121, 241, 43, 185, 30, 218, 251, 170, 198, 89, 21, 18, 239, 34, 157, 42, 32, 32, 159, 146, 62, 201, 166, 99, 138, 102, 86, 90, 0, 156, 78, 173, 131, 159, 214, 175, 85, 43, 255, 20 },
                            MdpSalt = new byte[] { 150, 56, 189, 117, 50, 35, 248, 10, 193, 191, 252, 110, 148, 192, 206, 243, 29, 57, 36, 45, 247, 108, 112, 70, 152, 67, 17, 204, 251, 116, 214, 62, 209, 77, 169, 217, 157, 168, 163, 190, 65, 199, 33, 185, 90, 9, 100, 123, 151, 198, 63, 85, 7, 236, 211, 184, 93, 17, 246, 102, 100, 91, 96, 96, 70, 168, 168, 192, 91, 213, 34, 137, 225, 196, 47, 40, 182, 41, 33, 70, 210, 247, 76, 196, 152, 71, 144, 31, 105, 8, 237, 248, 185, 59, 205, 7, 38, 122, 153, 29, 32, 237, 8, 248, 143, 238, 224, 35, 193, 41, 147, 51, 168, 239, 225, 130, 23, 82, 152, 140, 152, 96, 226, 252, 163, 164, 185, 156 },
                            NomComplet = "Livreur Test",
                            Role = 2
                        });
                });

            modelBuilder.Entity("Avis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAvis")
                        .HasColumnType("datetime2");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProduitId");

                    b.ToTable("Avis");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCommande")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LivreurId")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<int?>("StatutLivraison")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LivreurId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtisanId")
                        .HasColumnType("int");

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Prix")
                        .HasColumnType("real");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.HasOne("Commande", "Commande")
                        .WithMany("Lignes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany("LigneCommandes")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commande");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Avis", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany("Avis")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany("CommandesClient")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Livreur")
                        .WithMany("CommandesLivreur")
                        .HasForeignKey("LivreurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Livreur");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Artisan")
                        .WithMany("Produits")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artisan");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Navigation("CommandesClient");

                    b.Navigation("CommandesLivreur");

                    b.Navigation("Produits");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Navigation("Lignes");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.Navigation("Avis");

                    b.Navigation("LigneCommandes");
                });
#pragma warning restore 612, 618
        }
    }
}
