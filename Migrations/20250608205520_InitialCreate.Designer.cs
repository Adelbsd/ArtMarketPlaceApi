// <auto-generated />
using System;
using ArtMarketPlaceAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtMarketPlaceAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250608205520_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.Avis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAvis")
                        .HasColumnType("datetime2");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProduitId");

                    b.HasIndex("UserId");

                    b.ToTable("Avis");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrixUnitaire")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int>("Quantité")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("ProduitId");

                    b.ToTable("LignesCommandes");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.Produit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("ArtisanId")
                        .HasColumnType("int");

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Prix")
                        .HasColumnType("real");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("ArtisanId");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("MdpHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("MdpSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            MdpHash = new byte[] { 15, 53, 158, 165, 178, 103, 100, 253, 253, 195, 69, 132, 27, 58, 182, 123, 7, 172, 187, 31, 157, 72, 71, 133, 4, 202, 232, 141, 171, 9, 10, 37, 163, 112, 36, 250, 162, 232, 140, 199, 22, 141, 172, 6, 174, 190, 135, 20, 48, 196, 243, 182, 237, 15, 45, 91, 155, 133, 129, 108, 42, 50, 92, 101 },
                            MdpSalt = new byte[] { 35, 97, 140, 40, 143, 43, 76, 207, 202, 229, 41, 77, 0, 232, 21, 9, 87, 174, 51, 32, 14, 187, 13, 40, 242, 245, 37, 162, 165, 240, 186, 85, 106, 45, 72, 232, 48, 23, 47, 249, 71, 15, 128, 45, 145, 73, 121, 39, 149, 137, 28, 11, 98, 130, 230, 190, 10, 32, 246, 82, 69, 34, 99, 132, 76, 174, 185, 126, 54, 27, 136, 197, 90, 68, 218, 25, 98, 58, 47, 150, 245, 15, 196, 112, 217, 180, 91, 57, 22, 189, 23, 143, 158, 37, 158, 213, 130, 22, 70, 17, 97, 91, 185, 80, 231, 79, 4, 252, 204, 96, 107, 137, 41, 187, 197, 207, 90, 111, 98, 33, 216, 64, 143, 93, 191, 154, 47, 120 },
                            NomComplet = "Admin Test",
                            Role = 3
                        },
                        new
                        {
                            Id = 2,
                            Email = "artisan@example.com",
                            MdpHash = new byte[] { 15, 53, 158, 165, 178, 103, 100, 253, 253, 195, 69, 132, 27, 58, 182, 123, 7, 172, 187, 31, 157, 72, 71, 133, 4, 202, 232, 141, 171, 9, 10, 37, 163, 112, 36, 250, 162, 232, 140, 199, 22, 141, 172, 6, 174, 190, 135, 20, 48, 196, 243, 182, 237, 15, 45, 91, 155, 133, 129, 108, 42, 50, 92, 101 },
                            MdpSalt = new byte[] { 35, 97, 140, 40, 143, 43, 76, 207, 202, 229, 41, 77, 0, 232, 21, 9, 87, 174, 51, 32, 14, 187, 13, 40, 242, 245, 37, 162, 165, 240, 186, 85, 106, 45, 72, 232, 48, 23, 47, 249, 71, 15, 128, 45, 145, 73, 121, 39, 149, 137, 28, 11, 98, 130, 230, 190, 10, 32, 246, 82, 69, 34, 99, 132, 76, 174, 185, 126, 54, 27, 136, 197, 90, 68, 218, 25, 98, 58, 47, 150, 245, 15, 196, 112, 217, 180, 91, 57, 22, 189, 23, 143, 158, 37, 158, 213, 130, 22, 70, 17, 97, 91, 185, 80, 231, 79, 4, 252, 204, 96, 107, 137, 41, 187, 197, 207, 90, 111, 98, 33, 216, 64, 143, 93, 191, 154, 47, 120 },
                            NomComplet = "Artisan Test",
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "client@example.com",
                            MdpHash = new byte[] { 15, 53, 158, 165, 178, 103, 100, 253, 253, 195, 69, 132, 27, 58, 182, 123, 7, 172, 187, 31, 157, 72, 71, 133, 4, 202, 232, 141, 171, 9, 10, 37, 163, 112, 36, 250, 162, 232, 140, 199, 22, 141, 172, 6, 174, 190, 135, 20, 48, 196, 243, 182, 237, 15, 45, 91, 155, 133, 129, 108, 42, 50, 92, 101 },
                            MdpSalt = new byte[] { 35, 97, 140, 40, 143, 43, 76, 207, 202, 229, 41, 77, 0, 232, 21, 9, 87, 174, 51, 32, 14, 187, 13, 40, 242, 245, 37, 162, 165, 240, 186, 85, 106, 45, 72, 232, 48, 23, 47, 249, 71, 15, 128, 45, 145, 73, 121, 39, 149, 137, 28, 11, 98, 130, 230, 190, 10, 32, 246, 82, 69, 34, 99, 132, 76, 174, 185, 126, 54, 27, 136, 197, 90, 68, 218, 25, 98, 58, 47, 150, 245, 15, 196, 112, 217, 180, 91, 57, 22, 189, 23, 143, 158, 37, 158, 213, 130, 22, 70, 17, 97, 91, 185, 80, 231, 79, 4, 252, 204, 96, 107, 137, 41, 187, 197, 207, 90, 111, 98, 33, 216, 64, 143, 93, 191, 154, 47, 120 },
                            NomComplet = "Client Test",
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "livreur@example.com",
                            MdpHash = new byte[] { 15, 53, 158, 165, 178, 103, 100, 253, 253, 195, 69, 132, 27, 58, 182, 123, 7, 172, 187, 31, 157, 72, 71, 133, 4, 202, 232, 141, 171, 9, 10, 37, 163, 112, 36, 250, 162, 232, 140, 199, 22, 141, 172, 6, 174, 190, 135, 20, 48, 196, 243, 182, 237, 15, 45, 91, 155, 133, 129, 108, 42, 50, 92, 101 },
                            MdpSalt = new byte[] { 35, 97, 140, 40, 143, 43, 76, 207, 202, 229, 41, 77, 0, 232, 21, 9, 87, 174, 51, 32, 14, 187, 13, 40, 242, 245, 37, 162, 165, 240, 186, 85, 106, 45, 72, 232, 48, 23, 47, 249, 71, 15, 128, 45, 145, 73, 121, 39, 149, 137, 28, 11, 98, 130, 230, 190, 10, 32, 246, 82, 69, 34, 99, 132, 76, 174, 185, 126, 54, 27, 136, 197, 90, 68, 218, 25, 98, 58, 47, 150, 245, 15, 196, 112, 217, 180, 91, 57, 22, 189, 23, 143, 158, 37, 158, 213, 130, 22, 70, 17, 97, 91, 185, 80, 231, 79, 4, 252, 204, 96, 107, 137, 41, 187, 197, 207, 90, 111, 98, 33, 216, 64, 143, 93, 191, 154, 47, 120 },
                            NomComplet = "Livreur Test",
                            Role = 2
                        });
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCommande")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LivreurId")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<int?>("StatutLivraison")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LivreurId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.Avis", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ArtMarketPlaceAPI.Models.Produit", "Produit")
                        .WithMany("Avis")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtMarketPlaceAPI.Models.User", null)
                        .WithMany("Avis")
                        .HasForeignKey("UserId");

                    b.Navigation("Client");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.HasOne("Commande", "Commande")
                        .WithMany("Lignes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ArtMarketPlaceAPI.Models.Produit", "Produit")
                        .WithMany("LigneCommandes")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commande");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.Produit", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Artisan")
                        .WithMany("Produits")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artisan");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany("CommandesClient")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Livreur")
                        .WithMany("CommandesLivreur")
                        .HasForeignKey("LivreurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Livreur");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.Produit", b =>
                {
                    b.Navigation("Avis");

                    b.Navigation("LigneCommandes");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Navigation("Avis");

                    b.Navigation("CommandesClient");

                    b.Navigation("CommandesLivreur");

                    b.Navigation("Produits");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Navigation("Lignes");
                });
#pragma warning restore 612, 618
        }
    }
}
