// <auto-generated />
using System;
using ArtMarketPlaceAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtMarketPlaceAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250818014804_FixProduitImageUrl")]
    partial class FixProduitImageUrl
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.Avis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAvis")
                        .HasColumnType("datetime2");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProduitId");

                    b.ToTable("Avis");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int>("Quantite")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProduitId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrixUnitaire")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int>("Quantité")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("ProduitId");

                    b.ToTable("LignesCommandes");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("MdpHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("MdpSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            MdpHash = new byte[] { 215, 119, 215, 252, 191, 165, 19, 8, 213, 219, 137, 0, 41, 114, 171, 111, 25, 253, 205, 161, 10, 48, 244, 128, 73, 140, 158, 98, 153, 98, 8, 114, 119, 172, 117, 109, 99, 33, 65, 83, 51, 153, 37, 243, 246, 180, 90, 27, 232, 77, 99, 97, 106, 181, 61, 95, 220, 12, 108, 239, 126, 116, 190, 27 },
                            MdpSalt = new byte[] { 12, 195, 198, 107, 98, 208, 101, 0, 117, 28, 86, 149, 210, 12, 198, 204, 163, 245, 56, 123, 19, 230, 213, 169, 218, 62, 130, 213, 123, 35, 110, 95, 199, 25, 116, 17, 139, 127, 149, 79, 41, 141, 58, 71, 198, 103, 134, 124, 222, 250, 190, 82, 139, 109, 148, 176, 58, 238, 147, 62, 233, 141, 111, 180, 200, 14, 71, 63, 9, 27, 128, 197, 141, 251, 150, 71, 88, 11, 15, 180, 191, 255, 234, 69, 222, 27, 104, 138, 205, 242, 57, 54, 144, 3, 236, 4, 192, 114, 150, 218, 170, 219, 106, 222, 233, 146, 71, 21, 33, 61, 40, 149, 198, 209, 78, 1, 61, 194, 125, 231, 79, 98, 11, 134, 252, 104, 255, 86 },
                            NomComplet = "Admin Test",
                            Role = 3
                        },
                        new
                        {
                            Id = 2,
                            Email = "artisan@example.com",
                            MdpHash = new byte[] { 215, 119, 215, 252, 191, 165, 19, 8, 213, 219, 137, 0, 41, 114, 171, 111, 25, 253, 205, 161, 10, 48, 244, 128, 73, 140, 158, 98, 153, 98, 8, 114, 119, 172, 117, 109, 99, 33, 65, 83, 51, 153, 37, 243, 246, 180, 90, 27, 232, 77, 99, 97, 106, 181, 61, 95, 220, 12, 108, 239, 126, 116, 190, 27 },
                            MdpSalt = new byte[] { 12, 195, 198, 107, 98, 208, 101, 0, 117, 28, 86, 149, 210, 12, 198, 204, 163, 245, 56, 123, 19, 230, 213, 169, 218, 62, 130, 213, 123, 35, 110, 95, 199, 25, 116, 17, 139, 127, 149, 79, 41, 141, 58, 71, 198, 103, 134, 124, 222, 250, 190, 82, 139, 109, 148, 176, 58, 238, 147, 62, 233, 141, 111, 180, 200, 14, 71, 63, 9, 27, 128, 197, 141, 251, 150, 71, 88, 11, 15, 180, 191, 255, 234, 69, 222, 27, 104, 138, 205, 242, 57, 54, 144, 3, 236, 4, 192, 114, 150, 218, 170, 219, 106, 222, 233, 146, 71, 21, 33, 61, 40, 149, 198, 209, 78, 1, 61, 194, 125, 231, 79, 98, 11, 134, 252, 104, 255, 86 },
                            NomComplet = "Artisan Test",
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "client@example.com",
                            MdpHash = new byte[] { 215, 119, 215, 252, 191, 165, 19, 8, 213, 219, 137, 0, 41, 114, 171, 111, 25, 253, 205, 161, 10, 48, 244, 128, 73, 140, 158, 98, 153, 98, 8, 114, 119, 172, 117, 109, 99, 33, 65, 83, 51, 153, 37, 243, 246, 180, 90, 27, 232, 77, 99, 97, 106, 181, 61, 95, 220, 12, 108, 239, 126, 116, 190, 27 },
                            MdpSalt = new byte[] { 12, 195, 198, 107, 98, 208, 101, 0, 117, 28, 86, 149, 210, 12, 198, 204, 163, 245, 56, 123, 19, 230, 213, 169, 218, 62, 130, 213, 123, 35, 110, 95, 199, 25, 116, 17, 139, 127, 149, 79, 41, 141, 58, 71, 198, 103, 134, 124, 222, 250, 190, 82, 139, 109, 148, 176, 58, 238, 147, 62, 233, 141, 111, 180, 200, 14, 71, 63, 9, 27, 128, 197, 141, 251, 150, 71, 88, 11, 15, 180, 191, 255, 234, 69, 222, 27, 104, 138, 205, 242, 57, 54, 144, 3, 236, 4, 192, 114, 150, 218, 170, 219, 106, 222, 233, 146, 71, 21, 33, 61, 40, 149, 198, 209, 78, 1, 61, 194, 125, 231, 79, 98, 11, 134, 252, 104, 255, 86 },
                            NomComplet = "Client Test",
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "livreur@example.com",
                            MdpHash = new byte[] { 215, 119, 215, 252, 191, 165, 19, 8, 213, 219, 137, 0, 41, 114, 171, 111, 25, 253, 205, 161, 10, 48, 244, 128, 73, 140, 158, 98, 153, 98, 8, 114, 119, 172, 117, 109, 99, 33, 65, 83, 51, 153, 37, 243, 246, 180, 90, 27, 232, 77, 99, 97, 106, 181, 61, 95, 220, 12, 108, 239, 126, 116, 190, 27 },
                            MdpSalt = new byte[] { 12, 195, 198, 107, 98, 208, 101, 0, 117, 28, 86, 149, 210, 12, 198, 204, 163, 245, 56, 123, 19, 230, 213, 169, 218, 62, 130, 213, 123, 35, 110, 95, 199, 25, 116, 17, 139, 127, 149, 79, 41, 141, 58, 71, 198, 103, 134, 124, 222, 250, 190, 82, 139, 109, 148, 176, 58, 238, 147, 62, 233, 141, 111, 180, 200, 14, 71, 63, 9, 27, 128, 197, 141, 251, 150, 71, 88, 11, 15, 180, 191, 255, 234, 69, 222, 27, 104, 138, 205, 242, 57, 54, 144, 3, 236, 4, 192, 114, 150, 218, 170, 219, 106, 222, 233, 146, 71, 21, 33, 61, 40, 149, 198, 209, 78, 1, 61, 194, 125, 231, 79, 98, 11, 134, 252, 104, 255, 86 },
                            NomComplet = "Livreur Test",
                            Role = 2
                        });
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdresseLivraison")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCommande")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLivraison")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LivreurId")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<int?>("StatutLivraison")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LivreurId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtisanId")
                        .HasColumnType("int");

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Prix")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.Avis", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany("Avis")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.CartItem", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany()
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.HasOne("Commande", "Commande")
                        .WithMany("Lignes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany("LigneCommandes")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commande");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany("CommandesClient")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Livreur")
                        .WithMany("CommandesLivreur")
                        .HasForeignKey("LivreurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Livreur");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Artisan")
                        .WithMany("Produits")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artisan");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Navigation("CommandesClient");

                    b.Navigation("CommandesLivreur");

                    b.Navigation("Produits");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Navigation("Lignes");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.Navigation("Avis");

                    b.Navigation("LigneCommandes");
                });
#pragma warning restore 612, 618
        }
    }
}
