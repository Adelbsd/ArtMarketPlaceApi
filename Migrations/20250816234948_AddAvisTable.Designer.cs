// <auto-generated />
using System;
using ArtMarketPlaceAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtMarketPlaceAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250816234948_AddAvisTable")]
    partial class AddAvisTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommandeId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrixUnitaire")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int>("Quantité")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommandeId");

                    b.HasIndex("ProduitId");

                    b.ToTable("LignesCommandes");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("MdpHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("MdpSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            MdpHash = new byte[] { 101, 223, 71, 225, 193, 193, 112, 40, 253, 251, 22, 96, 162, 25, 192, 194, 219, 23, 7, 99, 173, 244, 182, 185, 85, 110, 8, 237, 239, 91, 75, 178, 171, 108, 12, 194, 72, 63, 236, 19, 217, 255, 139, 188, 126, 250, 127, 244, 47, 85, 105, 5, 237, 251, 22, 148, 193, 8, 114, 84, 48, 158, 195, 158 },
                            MdpSalt = new byte[] { 140, 57, 209, 138, 124, 242, 226, 192, 149, 193, 129, 145, 25, 242, 165, 15, 102, 159, 133, 254, 210, 45, 55, 251, 43, 157, 140, 47, 228, 117, 96, 132, 165, 203, 134, 132, 68, 255, 48, 81, 213, 129, 96, 94, 254, 198, 174, 45, 219, 224, 15, 57, 5, 185, 31, 194, 217, 19, 239, 161, 80, 16, 138, 223, 135, 106, 223, 88, 88, 171, 177, 198, 136, 158, 23, 127, 62, 83, 63, 230, 93, 133, 236, 51, 120, 174, 55, 97, 195, 108, 179, 51, 36, 154, 98, 171, 170, 71, 109, 249, 52, 176, 162, 93, 98, 54, 47, 225, 58, 100, 189, 8, 57, 93, 13, 213, 92, 58, 242, 70, 206, 109, 62, 66, 178, 37, 91, 0 },
                            NomComplet = "Admin Test",
                            Role = 3
                        },
                        new
                        {
                            Id = 2,
                            Email = "artisan@example.com",
                            MdpHash = new byte[] { 101, 223, 71, 225, 193, 193, 112, 40, 253, 251, 22, 96, 162, 25, 192, 194, 219, 23, 7, 99, 173, 244, 182, 185, 85, 110, 8, 237, 239, 91, 75, 178, 171, 108, 12, 194, 72, 63, 236, 19, 217, 255, 139, 188, 126, 250, 127, 244, 47, 85, 105, 5, 237, 251, 22, 148, 193, 8, 114, 84, 48, 158, 195, 158 },
                            MdpSalt = new byte[] { 140, 57, 209, 138, 124, 242, 226, 192, 149, 193, 129, 145, 25, 242, 165, 15, 102, 159, 133, 254, 210, 45, 55, 251, 43, 157, 140, 47, 228, 117, 96, 132, 165, 203, 134, 132, 68, 255, 48, 81, 213, 129, 96, 94, 254, 198, 174, 45, 219, 224, 15, 57, 5, 185, 31, 194, 217, 19, 239, 161, 80, 16, 138, 223, 135, 106, 223, 88, 88, 171, 177, 198, 136, 158, 23, 127, 62, 83, 63, 230, 93, 133, 236, 51, 120, 174, 55, 97, 195, 108, 179, 51, 36, 154, 98, 171, 170, 71, 109, 249, 52, 176, 162, 93, 98, 54, 47, 225, 58, 100, 189, 8, 57, 93, 13, 213, 92, 58, 242, 70, 206, 109, 62, 66, 178, 37, 91, 0 },
                            NomComplet = "Artisan Test",
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "client@example.com",
                            MdpHash = new byte[] { 101, 223, 71, 225, 193, 193, 112, 40, 253, 251, 22, 96, 162, 25, 192, 194, 219, 23, 7, 99, 173, 244, 182, 185, 85, 110, 8, 237, 239, 91, 75, 178, 171, 108, 12, 194, 72, 63, 236, 19, 217, 255, 139, 188, 126, 250, 127, 244, 47, 85, 105, 5, 237, 251, 22, 148, 193, 8, 114, 84, 48, 158, 195, 158 },
                            MdpSalt = new byte[] { 140, 57, 209, 138, 124, 242, 226, 192, 149, 193, 129, 145, 25, 242, 165, 15, 102, 159, 133, 254, 210, 45, 55, 251, 43, 157, 140, 47, 228, 117, 96, 132, 165, 203, 134, 132, 68, 255, 48, 81, 213, 129, 96, 94, 254, 198, 174, 45, 219, 224, 15, 57, 5, 185, 31, 194, 217, 19, 239, 161, 80, 16, 138, 223, 135, 106, 223, 88, 88, 171, 177, 198, 136, 158, 23, 127, 62, 83, 63, 230, 93, 133, 236, 51, 120, 174, 55, 97, 195, 108, 179, 51, 36, 154, 98, 171, 170, 71, 109, 249, 52, 176, 162, 93, 98, 54, 47, 225, 58, 100, 189, 8, 57, 93, 13, 213, 92, 58, 242, 70, 206, 109, 62, 66, 178, 37, 91, 0 },
                            NomComplet = "Client Test",
                            Role = 1
                        },
                        new
                        {
                            Id = 4,
                            Email = "livreur@example.com",
                            MdpHash = new byte[] { 101, 223, 71, 225, 193, 193, 112, 40, 253, 251, 22, 96, 162, 25, 192, 194, 219, 23, 7, 99, 173, 244, 182, 185, 85, 110, 8, 237, 239, 91, 75, 178, 171, 108, 12, 194, 72, 63, 236, 19, 217, 255, 139, 188, 126, 250, 127, 244, 47, 85, 105, 5, 237, 251, 22, 148, 193, 8, 114, 84, 48, 158, 195, 158 },
                            MdpSalt = new byte[] { 140, 57, 209, 138, 124, 242, 226, 192, 149, 193, 129, 145, 25, 242, 165, 15, 102, 159, 133, 254, 210, 45, 55, 251, 43, 157, 140, 47, 228, 117, 96, 132, 165, 203, 134, 132, 68, 255, 48, 81, 213, 129, 96, 94, 254, 198, 174, 45, 219, 224, 15, 57, 5, 185, 31, 194, 217, 19, 239, 161, 80, 16, 138, 223, 135, 106, 223, 88, 88, 171, 177, 198, 136, 158, 23, 127, 62, 83, 63, 230, 93, 133, 236, 51, 120, 174, 55, 97, 195, 108, 179, 51, 36, 154, 98, 171, 170, 71, 109, 249, 52, 176, 162, 93, 98, 54, 47, 225, 58, 100, 189, 8, 57, 93, 13, 213, 92, 58, 242, 70, 206, 109, 62, 66, 178, 37, 91, 0 },
                            NomComplet = "Livreur Test",
                            Role = 2
                        });
                });

            modelBuilder.Entity("Avis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAvis")
                        .HasColumnType("datetime2");

                    b.Property<int>("Note")
                        .HasColumnType("int");

                    b.Property<int>("ProduitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProduitId");

                    b.ToTable("Avis");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdresseLivraison")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCommande")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLivraison")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LivreurId")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<int?>("StatutLivraison")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("LivreurId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtisanId")
                        .HasColumnType("int");

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAjout")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Prix")
                        .HasColumnType("real");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArtisanId");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.LigneCommande", b =>
                {
                    b.HasOne("Commande", "Commande")
                        .WithMany("Lignes")
                        .HasForeignKey("CommandeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany("LigneCommandes")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commande");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Avis", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Produit", "Produit")
                        .WithMany("Avis")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Client")
                        .WithMany("CommandesClient")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Livreur")
                        .WithMany("CommandesLivreur")
                        .HasForeignKey("LivreurId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Client");

                    b.Navigation("Livreur");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.HasOne("ArtMarketPlaceAPI.Models.User", "Artisan")
                        .WithMany("Produits")
                        .HasForeignKey("ArtisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artisan");
                });

            modelBuilder.Entity("ArtMarketPlaceAPI.Models.User", b =>
                {
                    b.Navigation("CommandesClient");

                    b.Navigation("CommandesLivreur");

                    b.Navigation("Produits");
                });

            modelBuilder.Entity("Commande", b =>
                {
                    b.Navigation("Lignes");
                });

            modelBuilder.Entity("Produit", b =>
                {
                    b.Navigation("Avis");

                    b.Navigation("LigneCommandes");
                });
#pragma warning restore 612, 618
        }
    }
}
